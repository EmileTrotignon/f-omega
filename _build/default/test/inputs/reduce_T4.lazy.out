type nat0 :: (Type -> Type) -> Type -> Type =
  lam S :: Type -> Type. lam Z. Z
type nat1 :: (Type -> Type) -> Type -> Type =
  lam S :: Type -> Type. lam Z. S Z
type add ::
  ((Type -> Type) -> Type -> Type) ->
  ((Type -> Type) -> Type -> Type) -> (Type -> Type) -> Type -> Type =
  lam P :: (Type -> Type) -> Type -> Type.
    lam Q :: (Type -> Type) -> Type -> Type. lam S :: Type -> Type.
    lam Z.
    P S (Q S Z)
type times ::
  ((Type -> Type) -> Type -> Type) ->
  ((Type -> Type) -> Type -> Type) -> (Type -> Type) -> Type -> Type =
  lam P :: (Type -> Type) -> Type -> Type.
    lam Q :: (Type -> Type) -> Type -> Type. lam S :: Type -> Type.
    lam Z.
    P (Q S) Z
type square ::
  ((Type -> Type) -> Type -> Type) -> (Type -> Type) -> Type -> Type =
  lam P :: (Type -> Type) -> Type -> Type.
  (lam P :: (Type -> Type) -> Type -> Type.
     lam Q :: (Type -> Type) -> Type -> Type. lam S :: Type -> Type.
     lam Z.
     P (Q S) Z) P P
type nat2 :: (Type -> Type) -> Type -> Type =
  lam S :: Type -> Type.
    lam Z.
    (lam S :: Type -> Type. lam Z. S Z) S
      ((lam S :: Type -> Type. lam Z. S Z) S Z)
type nat4 :: (Type -> Type) -> Type -> Type =
  lam S :: Type -> Type.
    lam Z.
    (lam S :: Type -> Type. lam Z. S (S Z))
      ((lam S :: Type -> Type. lam Z. S (S Z)) S) Z
type z = int
type s :: Type -> Type = lam W. W * W
val check :
  ((lam W. W * W)
     ((lam W. W * W)
        ((lam W. W * W)
           ((lam S :: Type -> Type. lam Z. S (S (S (S Z)))) (lam W. W * W)
              int))) *
   (lam W. W * W)
     ((lam W. W * W)
        ((lam W. W * W)
           ((lam S :: Type -> Type. lam Z. S (S (S (S Z)))) (lam W. W * W)
              int)))) ->
    (((((((int * int) * (int * int)) * ((int * int) * (int * int))) *
        (((int * int) * (int * int)) * ((int * int) * (int * int)))) *
       ((((int * int) * (int * int)) * ((int * int) * (int * int))) *
        (((int * int) * (int * int)) * ((int * int) * (int * int))))) *
      (((((int * int) * (int * int)) * ((int * int) * (int * int))) *
        (((int * int) * (int * int)) * ((int * int) * (int * int)))) *
       ((((int * int) * (int * int)) * ((int * int) * (int * int))) *
        (((int * int) * (int * int)) * ((int * int) * (int * int)))))) *
     ((((((int * int) * (int * int)) * ((int * int) * (int * int))) *
        (((int * int) * (int * int)) * ((int * int) * (int * int)))) *
       ((((int * int) * (int * int)) * ((int * int) * (int * int))) *
        (((int * int) * (int * int)) * ((int * int) * (int * int))))) *
      (((((int * int) * (int * int)) * ((int * int) * (int * int))) *
        (((int * int) * (int * int)) * ((int * int) * (int * int)))) *
       ((((int * int) * (int * int)) * ((int * int) * (int * int))) *
        (((int * int) * (int * int)) * ((int * int) * (int * int))))))) *
    (((((((int * int) * (int * int)) * ((int * int) * (int * int))) *
        (((int * int) * (int * int)) * ((int * int) * (int * int)))) *
       ((((int * int) * (int * int)) * ((int * int) * (int * int))) *
        (((int * int) * (int * int)) * ((int * int) * (int * int))))) *
      (((((int * int) * (int * int)) * ((int * int) * (int * int))) *
        (((int * int) * (int * int)) * ((int * int) * (int * int)))) *
       ((((int * int) * (int * int)) * ((int * int) * (int * int))) *
        (((int * int) * (int * int)) * ((int * int) * (int * int)))))) *
     ((((((int * int) * (int * int)) * ((int * int) * (int * int))) *
        (((int * int) * (int * int)) * ((int * int) * (int * int)))) *
       ((((int * int) * (int * int)) * ((int * int) * (int * int))) *
        (((int * int) * (int * int)) * ((int * int) * (int * int))))) *
      (((((int * int) * (int * int)) * ((int * int) * (int * int))) *
        (((int * int) * (int * int)) * ((int * int) * (int * int)))) *
       ((((int * int) * (int * int)) * ((int * int) * (int * int))) *
        (((int * int) * (int * int)) * ((int * int) * (int * int)))))))
