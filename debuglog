lazy normalizing :
unit
into :
unit
normalizing :
unit
into :
unit
lazy normalizing :
bool
into :
bool
normalizing :
bool
into :
bool
lazy normalizing :
int
into :
int
normalizing :
int
into :
int
lazy normalizing :
string
into :
string
normalizing :
string
into :
string
lazy normalizing :
all #. #
into :
all #. #
normalizing :
all #. #
into :
all #. #
location Characters -1--1:
<dummy loc>

adding evar for pattern type
Adding magic : %unif in env.evar.
unification for pattern annotation
lazy normalizing :
%unif
into :
%unif
lazy normalizing :
all #. #
into :
all #. #
Trying to unify 
%unif
and
all #. #
branch 3
add unification : %unif <- all #. #
unifications =  (%unif <== all #. #)
Successfully unified 
%unif
and
all #. #
into :
all #. #
substs into :all #. #.
typing pattern : magic : all #. # has type all #. #
type_exp_func : magic type to %unif\1
lazy normalizing :
all #. #
into :
all #. #
lazy normalizing :
%unif\1
into :
%unif\1
Trying to unify 
all #. #
and
%unif\1
branch 4
add unification : %unif\1 <- all #. #
unifications =  (%unif <== all #. #) (%unif\1 <== all #. #)
Successfully unified 
all #. #
and
%unif\1
into :
all #. #
substs into :all #. #.
exp typing : magic
- exp :
magic
- has type :
all #. #
lazy normalizing :
all #. #
into :
all #. #
lazy normalizing :
all #. #
into :
all #. #
Trying to unify 
all #. #
and
all #. #
branch 12
Subst : # became #
branch Tvar ident, Tvar ident' when eq_cvar ident ident'
Successfully unified 
all #. #
and
all #. #
into :
all #. #
substs into :all #. #.
Hey there, all #. #
adding evar for add_pattern_evar : magic : all #. #
Adding magic : all #. # in env.evar.
adding magic : all #. # : all #. #
location File "test.fw", line 1, characters 8-9:
f

adding evar for pattern type
Adding f : %unif\2 in env.evar.
typing pattern : f has type %unif\2
type_exp_func : let a = f 1 0 in f type to %unif\3
normalizing :
%unif\2
into :
%unif\2
normalizing :
%unif\3
into :
%unif\3
Trying to unify 
%unif\2
and
%unif\3
branch 3
add unification : %unif\2 <- %unif\3
unifications =  (%unif\2 <== %unif\3)
Successfully unified 
%unif\2
and
%unif\3
into :
%unif\3
substs into :%unif\3.
exp typing : let a = f 1 0 in f
typing pattern : a has type %unif\4
exp typing : f 1 0
exp typing : f
- exp :
f
- has type :
%unif\3
normalizing :
%unif\3
into :
%unif\3
applying %unif\3 to 1
exp typing : 1
- exp :
1
- has type :
int
unification for exp func appl. function is : f, arg is 1
type of function is :
%unif\3
and type of argument is :
int
normalizing :
%unif\3
into :
%unif\3
normalizing :
int -> %unif\5
into :
int -> %unif\5
Trying to unify 
%unif\3
and
int -> %unif\5
branch 3
add unification : %unif\3 <- int -> %unif\5
unifications =  (%unif\2 <== %unif\3) (%unif\3 <== int -> %unif\5)
Successfully unified 
%unif\3
and
int -> %unif\5
into :
int -> %unif\5
substs into :int -> %unif\5.
applying %unif\5 to 0
exp typing : 0
- exp :
0
- has type :
int
unification for exp func appl. function is : f, arg is 0
type of function is :
%unif\5
and type of argument is :
int
normalizing :
%unif\5
into :
%unif\5
normalizing :
int -> %unif\6
into :
int -> %unif\6
Trying to unify 
%unif\5
and
int -> %unif\6
branch 3
add unification : %unif\5 <- int -> %unif\6
unifications =  (%unif\2 <== %unif\3) (%unif\3 <== int -> %unif\5) (%unif\5 <== int -> %unif\6)
Successfully unified 
%unif\5
and
int -> %unif\6
into :
int -> %unif\6
substs into :int -> %unif\6.
normalizing :
%unif\6
into :
%unif\6
- exp :
f 1 0
- has type :
%unif\6
normalizing :
%unif\4
into :
%unif\4
normalizing :
%unif\6
into :
%unif\6
Trying to unify 
%unif\4
and
%unif\6
branch 3
add unification : %unif\4 <- %unif\6
unifications =  (%unif\2 <== %unif\3) (%unif\3 <== int -> %unif\5) (%unif\4 <== %unif\6) (%unif\5 <== int -> %unif\6)
Successfully unified 
%unif\4
and
%unif\6
into :
%unif\6
substs into :%unif\6.
adding evar for add_pattern_evar : a : %unif\6
Adding a : %unif\6 in env.evar.
exp typing : f
- exp :
f
- has type :
int -> %unif\5
- exp :
let a = f 1 0 in f
- has type :
int -> %unif\5
normalizing :
int -> %unif\5
into :
int -> %unif\5
normalizing :
%unif\2
into :
%unif\2
Trying to unify 
int -> %unif\5
and
%unif\2
branch 4
branch 3
branch 11
Successfully unified 
int -> %unif\5
and
%unif\2
into :
int -> %unif\5
substs into :int -> int -> %unif\6.
Hey there, int -> int -> %unif\6
adding evar for add_pattern_evar : f : int -> int -> %unif\6
Adding f : int -> int -> %unif\6 in env.evar.
adding f : int -> int -> %unif\6
